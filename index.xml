<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>alexheretic posts</title><link>https://alexheretic.github.io/</link><description>alexheretic posts</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sun, 06 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://alexheretic.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>AV1 encoding: SVT-AV1 &amp; VMAF</title><link>https://alexheretic.github.io/posts/av1-p1/</link><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid>https://alexheretic.github.io/posts/av1-p1/</guid><description>&lt;p>I&amp;rsquo;ve been experimenting with av1 video encoding for a while now. Av1 is a royalty free video codec set to replace existing codecs with better quality and/or lower bitrates. Support for it is somewhat decent now. Back when I first tried it I found the encoding speed (using the reference encoder libaom) to be just too slow.&lt;/p>
&lt;p>However, I later read about the &lt;a href="https://gitlab.com/AOMediaCodec/SVT-AV1">svt-av1&lt;/a> encoder over at &lt;a href="https://www.phoronix.com">phoronix&lt;/a> which offers much faster encoding. More recently svt-av1 &lt;strong>v0.9&lt;/strong> has released and &lt;a href="https://www.phoronix.com/scan.php?page=article&amp;amp;item=svt-av1-09&amp;amp;num=1">is even faster&lt;/a>. So I think we&amp;rsquo;re at the point where av1 encoding is now fast enough for mortals like me to actually use.&lt;/p>
&lt;h2 id="re-encoding-h264--friends" >Re-encoding h264 &amp;amp; friends
&lt;span>
&lt;a href="#re-encoding-h264--friends">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>A fair test of a codec is to take a high quality original compare an encoding using av1 and one using h264 (or whatever). However, in reality I have a bunch of already h264-ed videos with no high-quality originals. Av1 in many cases can do a much harder feat in re-encoding h264 to a significantly smaller size without perceptible quality loss.&lt;/p>
&lt;p>Lets re-encode a ~35 minute 854x480 h264 video as an example. First you&amp;rsquo;ll need svt-av1 &amp;amp; ffmpeg installed.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">sudo pacman -Syu svt-av1 ffmpeg
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we can use them to re-encode &lt;em>vid.mp4&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">ffmpeg -loglevel error -i vid.mp4 -pix_fmt yuv420p10le -strict -1 -f yuv4mpegpipe - &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> | SvtAv1EncApp -i stdin --crf &lt;span style="color:#ae81ff">32&lt;/span> --preset &lt;span style="color:#ae81ff">8&lt;/span> --input-depth &lt;span style="color:#ae81ff">10&lt;/span> -b stdout &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> | ffmpeg -i - -i vid.mp4 -map 0:v -map 1:a:0 -c:a copy -c:v copy vid.av1.mp4
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we&amp;rsquo;re doing 3 commands each piping into the next:&lt;/p>
&lt;ul>
&lt;li>Use ffmpeg to convert &lt;em>vid.mp4&lt;/em> into a format that svt-av1 can encode &lt;em>(using 10-bit over 8-bit as it&amp;rsquo;s generally recommended)&lt;/em>.&lt;/li>
&lt;li>Use svt-av1 to encode the stream using a &lt;strong>crf&lt;/strong> (quality) and &lt;strong>preset&lt;/strong> (encoder speed) setting we just made up.&lt;/li>
&lt;li>Finally use ffmpeg again to take the av1 data stream and combine with the original audio into a new &lt;em>vid.av1.mp4&lt;/em> file.&lt;/li>
&lt;/ul>
&lt;p>On my 5800x this takes &lt;strong>~7 minutes&lt;/strong>, so pretty fast, and encodes down to &lt;strong>66% original size&lt;/strong>. When I look at both side by side they seem the same quality. That&amp;rsquo;s great! &amp;hellip;But I wonder if we can do better.&lt;/p>
&lt;p>The most important settings above are the &lt;strong>crf&lt;/strong> &amp;amp; &lt;strong>preset&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>preset&lt;/strong> (0-13) is how fast the encoder works, higher values mean faster encodes but with lower quality.&lt;/li>
&lt;li>&lt;strong>crf&lt;/strong> is &amp;ldquo;constant rate factor&amp;rdquo; (1-63), higher values mean lower quality &amp;amp; lower size.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>preset&lt;/strong> values seem to work pretty consistently across all videos. You can pick a preset based on how impatient you are. My rough guide would be pick &lt;strong>6&lt;/strong> if &lt;strong>4&lt;/strong> is too slow for you, &lt;strong>8&lt;/strong> if &lt;strong>6&lt;/strong> is.&lt;/p>
&lt;p>&lt;strong>crf&lt;/strong> is trickier. The &amp;ldquo;right&amp;rdquo; setting will be different for how high quality you want, obviously, but it&amp;rsquo;s also different video to video, particularly across video resolutions.&lt;/p>
&lt;p>If we have time we can try more crf (and preset) values and check if the quality is good enough. But it&amp;rsquo;s slow, boring and inconsistent to compare videos manually with my actual eyes. It would be nice if we had a way to check the quality of the result eyelessly.&lt;/p>
&lt;h2 id="vmaf" >VMAF
&lt;span>
&lt;a href="#vmaf">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>VMAF is a video quality metric we can use to do that. You give it two videos and it&amp;rsquo;ll give you a score (0-100) of how close the distorted was to the original, 100 being perfect.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">sudo pacman -Syu vmaf
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can use this (via ffmpeg) to test our &lt;em>vid.av1.mp4&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">ffmpeg -i vid.av1.mp4 -i vid.mp4 -lavfi libvmaf -f null -
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This produces a VMAF score of &lt;strong>96.044922&lt;/strong>. So supports what my eyes thought &lt;em>vid.av1.mp4&lt;/em> is very similar to the h264 &lt;em>vid.mp4&lt;/em>. It also suggests we could get the av1 version even smaller and achieve, say, VMAF 95.&lt;/p>
&lt;p>Now we have the tools to test different &lt;strong>crf&lt;/strong> values to find the highest that gives us a given VMAF score. We can try different &lt;strong>preset&lt;/strong> values too.&lt;/p>
&lt;p>The catch is VMAF itself isn&amp;rsquo;t super fast. The run above took ~6 minutes using all my cores. So testing another crf will take another 13 minutes or so. If we try lower presets it&amp;rsquo;ll take longer to encode. And of course this is with a shortish low resolution video, longer 1080p or 4k videos will take ages.&lt;/p>
&lt;p>In the next post I&amp;rsquo;ll talk about a way to get &lt;strong>much faster VMAF scores&lt;/strong> for any given svt-av1 crf &amp;amp; preset.&lt;/p></description></item><item><title>Game years</title><link>https://alexheretic.github.io/posts/games/</link><pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate><guid>https://alexheretic.github.io/posts/games/</guid><description>&lt;p>In 2017 I quit my job to make a PC programming puzzle game &lt;a href="https://www.roboinstruct.us">&lt;strong>Robo Instructus&lt;/strong>&lt;/a>.&lt;/p>
&lt;p>&lt;img src="steam-robo-instructus.webp" alt="">&lt;/p>
&lt;p>One aspect in particular I worked on in some depth was &lt;strong>text rendering&lt;/strong>. Robo Instructus has a lot of text &amp;amp; there just wasn&amp;rsquo;t the libraries in the Rust ecosystem that could perform as I needed, particularly compiled in debug mode &lt;em>(and I&amp;rsquo;m not waiting for rust &amp;ndash;release compiles after each code change!)&lt;/em>.&lt;/p>
&lt;p>So I took over maintenance of &lt;a href="https://gitlab.redox-os.org/redox-os/rusttype">rusttype&lt;/a> and fixed my issues with it &amp;amp; its &amp;ldquo;gpu cache&amp;rdquo; module. I eventually rewrote it as &lt;a href="https://github.com/alexheretic/ab-glyph">ab-glyph&lt;/a>. With that as a base I also wrote the &lt;a href="https://github.com/alexheretic/glyph-brush">glyph-brush&lt;/a> crates which handle layout, clever caching and optimise the process of getting text strings into vertices pointing a subtextures on your GPU.&lt;/p>
&lt;p>My open source libs allowed me to handle the profusion of text in my game, I&amp;rsquo;ve also seen them used in other rust game projects &amp;amp; engines which is nice! However, text rendering is surprisingly deep &amp;amp; complex so I&amp;rsquo;ve no doubt superior tools will appear in the rust ecosystem in time.&lt;/p>
&lt;p>I wrote about some of my text rendering adventures on the game blog:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.roboinstruct.us/2018/05/18/technical-look-at-text-rendering-in-robo-instructus.html">2018: Technical Look At Text Rendering In Robo Instructus&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.roboinstruct.us/2018/05/25/technical-look-at-text-rendering-in-robo-instructus-ii.html">2018: Faster Screen Text Rendering&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.roboinstruct.us/2020/05/24/the-otf-journey.html">2020: Otf Font Rendering or: How I Should Have Learned To Stop Worrying And Love The Ttf&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://blog.roboinstruct.us/2020/05/24/the-otf-journey.html">&lt;img src="https://blog.roboinstruct.us/assets/2020-05-23/q-c-beziers.png" alt="">&lt;/a>&lt;/p>
&lt;p>You can read more over at &lt;a href="https://blog.roboinstruct.us">blog.roboinstruct.us&lt;/a>.&lt;/p></description></item></channel></rss>